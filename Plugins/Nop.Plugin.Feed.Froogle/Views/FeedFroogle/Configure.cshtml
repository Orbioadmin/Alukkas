@{
    Layout = "";

    Html.AddCssFileParts("~/Plugins/Feed.Froogle/Content/styles.css");  
}
@model FeedFroogleModel
@using Nop.Plugin.Feed.Froogle.Models;
@using Nop.Web.Framework;
@using Telerik.Web.Mvc.UI;
@using Nop.Web.Framework.UI;
@using (Html.BeginForm())
{
    @Html.Telerik().TabStrip().Name("googlebase-configure").Items(x =>
    {
        x.Add().Text(T("Plugins.Feed.Froogle.General").Text).Content(TabGeneral().ToHtmlString()).Selected(true);
        x.Add().Text(T("Plugins.Feed.Froogle.Override").Text).Content(TabOverride().ToHtmlString());
    })
}
@helper TabGeneral()
{
    <table class="adminContent">
        <tr>
            <td colspan="2">
                <ul>
                    <li>At least two unique product identifiers are required. So each of your product should
                        have manufacturer (brand) and MPN (manufacturer part number) specified</li>
                    <li>Specify default tax values in your Google Merchant Center account settings</li>
                    <li>Specify default shipping values in your Google Merchant Center account settings</li>
                    <li>In order to get more info about required fields look at the following article <a
                        href="http://www.google.com/support/merchants/bin/answer.py?answer=188494" target="_blank">http://www.google.com/support/merchants/bin/answer.py?answer=188494</a> </li>
                </ul>
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ProductPictureSize):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ProductPictureSize)
                @Html.ValidationMessageFor(model => model.ProductPictureSize)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StoreId):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.StoreId, Model.AvailableStores)
                @Html.ValidationMessageFor(model => model.StoreId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CurrencyId):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.CurrencyId, Model.AvailableCurrencies)
                @Html.ValidationMessageFor(model => model.CurrencyId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DefaultGoogleCategory):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.DefaultGoogleCategory, Model.AvailableGoogleCategories)
                @Html.ValidationMessageFor(model => model.DefaultGoogleCategory)
            </td>
        </tr>
        @if (Model.GeneratedFiles.Count > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(m => m.GeneratedFiles):
                </td>
                <td class="adminData">
                    @for (int i = 0; i <= Model.GeneratedFiles.Count - 1; i++)
                    {
                        var generatedFile = Model.GeneratedFiles[i];
                        @generatedFile.StoreName <text>-</text> <a href="@generatedFile.FileUrl" target="_blank">@generatedFile.FileUrl</a> 
                        if (i != Model.GeneratedFiles.Count - 1)
                        {
                        <br />
                        }
                    }
                </td>
            </tr>
        }
        <tr>
            <td colspan="2" width="100%">
                <input type="submit" name="save" class="t-button" value="@T("Admin.Common.Save")" />
                <input type="submit" name="generate" class="t-button" value="@T("Plugins.Feed.Froogle.Generate")" />
            </td>
        </tr>
        @if (!String.IsNullOrEmpty(Model.GenerateFeedResult))
        {
            <tr class="adminSeparator">
                <td colspan="2">
                    <hr />
                </td>
            </tr>
            <tr>
                <td colspan="2" width="100%">
                    <b>@Html.Raw(Model.GenerateFeedResult)</b>
                </td>
            </tr>
        }
    </table>        
}
@helper TabOverride()
{ 
    <table class="adminContent froogle">
        <tr>
            <td colspan="2">You can download the list of allowed Google product category attributes <a href="http://www.google.com/support/merchants/bin/answer.py?answer=160081"
                target="_blank">here</a>
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td>
                @(Html.Telerik().Grid<FeedFroogleModel.GoogleProductModel>()
                    .Name("froogleproducts-grid")
                    .DataKeys(keys =>
                    {
                        keys.Add(x => x.ProductId).RouteKey("ProductId");
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax()
                            .Select("GoogleProductList", "FeedFroogle", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Feed.Froogle.Controllers" }, { "area", "" } })
                            .Update("GoogleProductUpdate", "FeedFroogle", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Feed.Froogle.Controllers" }, { "area", "" } });
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.ProductId).ReadOnly().Visible(false);
                        columns.Bound(x => x.ProductName).ReadOnly();
                        columns.Bound(x => x.GoogleCategory).Visible(false);
                        columns.Bound(x => x.Gender).Visible(false);
                        columns.Bound(x => x.AgeGroup).Visible(false);
                        columns.Bound(x => x.Color).Visible(false);
                        columns.Bound(x => x.GoogleSize).Visible(false);
                    })
                    .ClientRowTemplate(grid => "<div class='product-info'>" +
                            "<#= ProductName #>" +
                            "</div>" +
                            "<div class='google-info'>" +
                            "<dl>" +
                            string.Format("<dt>{0}:</dt><dd><#= GoogleCategory #></dd>", T("Plugins.Feed.Froogle.Products.GoogleCategory").Text) +
                            string.Format("<dt>{0}:</dt><dd><#= Gender #></dd>", T("Plugins.Feed.Froogle.Products.Gender").Text) +
                            string.Format("<dt>{0}:</dt><dd><#= AgeGroup #></dd>", T("Plugins.Feed.Froogle.Products.AgeGroup").Text) +
                            string.Format("<dt>{0}:</dt><dd><#= Color #></dd>", T("Plugins.Feed.Froogle.Products.Color").Text) +
                            string.Format("<dt>{0}:</dt><dd><#= GoogleSize #></dd>", T("Plugins.Feed.Froogle.Products.Size").Text) +
                            "</dl>" +
                            "</div>" +
                            "<div class='commands'>" + grid.EditButton(null) + "</div>" +
                            "</div>")
                    .Editable(editing => editing.Mode(GridEditMode.PopUp))
                    .Pageable(settings => settings.PageSize(15).Position(GridPagerPosition.Both))
                    .EnableCustomBinding(true))
            </td>
        </tr>
    </table>
}