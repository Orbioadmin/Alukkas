@model RegisterModel
@using Nop.Web.Models.Customer;
@{
   @* Layout = "~/Views/Shared/_ColumnsTwo.cshtml";*@
    Layout = "~/Views/Shared/_ColumnsFour.cshtml";
    Html.AppendCssFileParts("~/Styles/TGI/myAccount.css");
    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);
    
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
             var selectedItem = $(this).val();
             var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
     });
    </script>
}
<div class="myAccount">
 <div class="page registration-page  accountContent">
<div class="accountBody">
 @using (Html.BeginForm("register", "Customer",FormMethod.Post,new { @class="form-horizontal"}))

{
    @Html.AntiForgeryToken()

   
        <div class="productHeading noMarginTop">
            <h3>@T("Account.Register")</h3>
        </div>
        <div class="page-body">

            <div class="message-error">
                @Html.ValidationSummary(true)
            </div>
            @Html.Partial("_ExternalAuthentication.AssociateMessage")
            <div class="form-group pull-left">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                <div class="form-group pull-left">
                    @if (Model.GenderEnabled)
                    {
                        <div class="inputs">
                            <label class="pull-left">@T("Account.Fields.Gender"):</label>
                            <div class="pull-left genderRegister">
                                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                                <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                            </div>
                            <div class="pull-left genderRegister">
                                @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                                <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                            </div>
                        </div>
                    }
                       <div class="form-group pull-left">
                   
                        @Html.LabelFor(model => model.FirstName, new { @class = "pull-left" }, ":")
                       <div class="pull-left inputArea">
                        @Html.EditorFor(model => model.FirstName,new { @class = "form-control" })
                                  </div>
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                      <div class="form-group pull-left">
                    
                        @Html.LabelFor(model => model.LastName, new { @class = "pull-left" }, ":")
                    <div class="pull-left inputArea">
                        @Html.EditorFor(model => model.LastName,new { @class = "form-control" })

                    </div>
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                    @if (Model.DateOfBirthEnabled)
                    {
                      <div class="form-group pull-left">
                        
                            <label class="pull-left">@T("Account.Fields.DateOfBirth"):</label>
                           <div class="pull-left inputArea"> @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                Html.FieldNameFor(x => x.DateOfBirthMonth),
                                Html.FieldNameFor(x => x.DateOfBirthYear),
                                DateTime.Now.Year - 110,
                                DateTime.Now.Year,
                                Model.DateOfBirthDay,
                                Model.DateOfBirthMonth,
                                Model.DateOfBirthYear)</div>
                            @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                            @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                            @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                        </div>
                    }
                      <div class="form-group pull-left">
                        @Html.LabelFor(model => model.Email, new { @class = "pull-left"  }, ":")
                          <div class="pull-left inputArea">
                        @Html.EditorFor(model => model.Email,new { @class = "form-control" })

                          </div>
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    @if (Model.UsernamesEnabled)
                    {
                        <div class="form-group pull-left" id="hidethis">
                            @Html.LabelFor(model => model.Username, new { @class = "pull-left" }, ":")
                           <div class="pull-left inputArea form-control"> @Html.EditorFor(model => model.Username)

                           </div>
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Username)
                            @if (Model.CheckUsernameAvailabilityEnabled)
                            {
                                @Html.Partial("_CheckUsernameAvailability")
                            }
                        </div>
                        
                    }
                </div>
            </div>
            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <div class="form-group pull-left">
                    <div class="title">
                        <strong>@T("Account.CompanyDetails")</strong>
                    </div>
                    <div class="form-group pull-left">
                        @if (Model.CompanyEnabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.Company, new {@class = "pull-left" }, ":")
                                 <div class="pull-left inputArea form-control">
                                @Html.EditorFor(model => model.Company)
                              </div>
                                @if (Model.CompanyRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.Company)
                            </div>
                        }
                        @if (Model.DisplayVatNumber)
                        {
                           
                                @Html.LabelFor(model => model.VatNumber, new {@class = "pull-left" }, ":")
                                <div class="pull-left inputArea form-control"> @Html.EditorFor(model => model.VatNumber)</div>
                                <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                            
                        }
                    </div>
                </div>
            }
            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled
            || Model.CityEnabled || Model.CountryEnabled)
            {
                <div class="form-group pull-left">
                    <div class="title">
                        <strong>@T("Account.YourAddress")</strong>
                    </div>
                    <div class="form-group pull-left">
                        @if (Model.StreetAddressEnabled)
                        {
                           <div class="form-group pull-left">
                                @Html.LabelFor(model => model.StreetAddress, new { @class = "pull-left"}, ":")
                            <div class="pull-left inputArea"> @Html.EditorFor(model => model.StreetAddress)</div>
                                @if (Model.StreetAddressRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StreetAddress)
                            </div>
                        }
                        @if (Model.StreetAddress2Enabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.StreetAddress2, new { @class = "pull-left"}, ":")
                       <div class="pull-left inputArea form-control">      @Html.EditorFor(model => model.StreetAddress2)</div>
                                @if (Model.StreetAddress2Required)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StreetAddress2)
                            </div>
                        }
                        @if (Model.ZipPostalCodeEnabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.ZipPostalCode, new {@class = "pull-left" }, ":")
 <div class="pull-left inputArea form-control">
                            @Html.EditorFor(model => model.ZipPostalCode)</div>
                                @if (Model.ZipPostalCodeRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.ZipPostalCode)
                            </div>
                        }
                        @if (Model.CityEnabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.City, new {@class = "pull-left" }, ":")
           <div class="pull-left inputArea form-control">    @Html.EditorFor(model => model.City)</div>

                                @if (Model.CityRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.City)
                            </div>
                        }
                        @if (Model.CountryEnabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.CountryId, new { @class = "pull-left"}, ":")
                      <div class="pull-left inputArea form-control">
                            @Html.DropDownList("CountryId", Model.AvailableCountries) </div>
                            </div>
                        }
                        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.StateProvinceId, new {@class = "pull-left" }, ":")
                        <div class="pull-left inputArea form-control">
            @Html.DropDownList("StateProvinceId", Model.AvailableStates)

</div>

                                <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="form-group pull-left">
                    <div class="title">
                        <strong>@T("Account.YourContactInformation")</strong>
                    </div>
                    <div class="form-group pull-left">
                        @if (Model.PhoneEnabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.Phone, new {@class = "pull-left" }, ":")
<div class="pull-left inputArea form-control">
                                @Html.EditorFor(model => model.Phone)
</div>
                                @if (Model.PhoneRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.Phone)
                            </div>
                        }
                        @if (Model.FaxEnabled)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.Fax, new {@class = "pull-left" }, ":")
<div class="pull-left inputArea form-control">

                                @Html.EditorFor(model => model.Fax)</div>
                                @if (Model.FaxRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.Fax)
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.NewsletterEnabled)
            {
                <div class="form-group pull-left">
                    <div class="title">
                        <strong>@T("Account.Options")</strong>
                    </div>
                    <div class="form-group pull-left">
                       
                            @Html.LabelFor(model => model.Newsletter, new { @class = "pull-left"}, ":")

                           <div class="pull-left inputArea form-control">
                            @Html.EditorFor(model => model.Newsletter)  </div>
                            @Html.ValidationMessageFor(model => model.Newsletter)
                        </div>
                  
                </div>
            }
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <div class="form-group pull-left">
                    <div class="title">
                        <strong>@T("Account.Preferences")</strong>
                    </div>
                    <div class="form-group pull-left">
                        @if (Model.AllowCustomersToSetTimeZone)
                        {
                            <div class="form-group pull-left">
                                @Html.LabelFor(model => model.TimeZoneId, new {@class = "pull-left" }, ":")
<div class="pull-left inputArea form-control">
                                @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)</div>
                                @Html.ValidationMessageFor(model => model.TimeZoneId)
                            </div>
                        }
                    </div>
                </div>
            }
            <div class="form-group pull-left">
                <div class="title">
                    <strong>@T("Account.YourPassword")</strong>
                </div>
                <div class="form-group pull-left">
                    <div class="form-group pull-left">
                        @Html.LabelFor(model => model.Password, new {@class = "pull-left" }, ":")
<div class="pull-left inputArea form-control">
                        @Html.EditorFor(model => model.Password)
</div>
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>
                    <div class="form-group pull-left">
                        @Html.LabelFor(model => model.ConfirmPassword, new {@class = "pull-left" }, ":")
<div class="pull-left inputArea form-control">
                        @Html.EditorFor(model => model.ConfirmPassword)
</div>
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            @Html.Raw(Html.GenerateCaptcha())
                        </div>
                    }
                </div>
            </div>
            @if (Model.AcceptPrivacyPolicyEnabled)
            {
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#register-button').click(function () {
                            if ($('#accept-privacy-policy').is(':checked')) {
                                //do some stuff
                                return true;
                            }
                            else {
                                //just show validation errors, dont post
                                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                return false;
                            }
                        });
                    });
                </script>
                <div class="accept-privacy-policy form-group pull-left">
                    <input id="accept-privacy-policy" type="checkbox" name="accept-privacy-policy" />
                    <label for="accept-privacy-policy">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                    <a class="read" href='@Url.RouteUrl("Topic", new { SystemName = "privacyinfo" })'>@T("Account.Fields.AcceptPrivacyPolicy.Read")</a>
                </div>
            }
           <div class="form-group pull-left">
         
                <input type="submit" id="register-button" class="btn continue  " value="@T("Account.Register.Button")" name="register-button" />
            </div>
        </div>
    

}
</div>
</div>
</div>


 @*<script type="text/javascript">
       function load() {
           document.getElementById('Username').value = document.getElementById('Email').value;
       }
       function HideUsername() {
           document.getElementById('hidethis').style.display = 'none';
       }
       window.onload = HideUsername;
</script>*@ 


<script type="text/javascript">
    function HideUsername() {
        $('#hidethis').css('display', 'none');
    }
    $(document).ready(function () {
        HideUsername();
    });

    $("#register-button").click(function () {

        $('#Username').val($('#Email').val());
  //   alert($('#Email').val());

    });
     </script>